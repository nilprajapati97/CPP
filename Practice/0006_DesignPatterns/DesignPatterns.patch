Design Patterns in C++
Design patterns are reusable solutions to common software design problems. They improve code reusability, scalability, and maintainability.

ðŸ”¹ Three Main Categories of Design Patterns:

-->  Creational Patterns â†’ Object creation techniques (e.g., Singleton, Factory).

-->  Structural Patterns â†’ Organizing objects and classes efficiently (e.g., Adapter, Decorator).

-->  Behavioral Patterns â†’ Handling communication between objects (e.g., Observer, Strategy).

Summary Table of Key Design Patterns
---------------------------------------------
Category	    Pattern	        Purpose
..............................................
Creational	    Singleton	    Ensures a class has only one instance
                Factory	        Creates objects dynamically based on input
Structural	    Adapter         Converts one interface into another
                Decorator	    Adds functionality dynamically to objects
Behavioral      Observer        Notifies multiple objects when state changes
                Strategy        Selects an algorithm at runtime

