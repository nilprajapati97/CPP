-: ðŸ”¹ Creational Patterns ðŸ”¹
=================================
Create or control object instantiation.

âœ… Singleton â€” Ensuring a class has only a single instance.
âœ… Factory Method â€” Create objects without specifying their exact class.
âœ… Abstract Factory â€” Create families of related or dependent products.
âœ… Builder â€” Construct complex objects step by step.
âœ… Prototype â€” Clone an existing object instead of creating a new one.

-: ðŸ”¹ Structural Patterns ðŸ”¹
Organize classes or objects to form larger structures while retaining flexibility.

âœ… Adapter â€” Convert one interface to another (for compatibility).
âœ… Composite â€” Create tree structures to enable uniform treatment of composite and leaf components.
âœ… Proxy â€” Provides a placeholder or surrogate for another object.
âœ… Decorator â€” Add responsibilities to an object dynamically.
âœ… Bridge â€” Separate abstraction from implementation.
âœ… Facet/Facade â€” Provides a simplified interface to a complex subsystem.
âœ… Flyweight â€” Share fine-grained object state efficiently.

-: ðŸ”¹ Behavioral Patterns ðŸ”¹
Improve or enable interaction and communication between objects.

âœ… Observer â€” Publish/Subscribe notifications to multiple dependents.
âœ… Strategy â€” Select algorithmâ€™s behavior at runtime.
âœ… Command â€” Encapsulate requests as object (for queuing, logging, undo/redo).
âœ… Chain of Responsibility â€” Pass requests along a chain of handlers.
âœ… Mediator â€” Centralize complex communications between components.
âœ… Iterator â€” Traverse elements in a collection gracefully.
âœ… Memento â€” Save and restore objectâ€™s state.
âœ… State â€” Alter behavior when objectâ€™s internal state evolves.
âœ… Template Method â€” General algorithm structure with customizable steps.
âœ… Visitor â€” Add operations to object structures without changing their classes.